--
-- BTREE_INDEX
-- test retrieval of min/max keys for each index
--
SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno < 1;
 seqno |   random   
-------+------------
     0 | 1935401906
(1 row)

SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno >= 9999;
 seqno |   random   
-------+------------
  9999 | 1227676208
(1 row)

SELECT b.*
   FROM bt_i4_heap b
   WHERE b.seqno = 4500;
 seqno |   random   
-------+------------
  4500 | 2080851358
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno < '1'::name;
 seqno |   random   
-------+------------
 0     | 1935401906
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno >= '9999'::name;
 seqno |   random   
-------+------------
 9999  | 1227676208
(1 row)

SELECT b.*
   FROM bt_name_heap b
   WHERE b.seqno = '4500'::name;
 seqno |   random   
-------+------------
 4500  | 2080851358
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno < '1'::text;
 seqno |   random   
-------+------------
 0     | 1935401906
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno >= '9999'::text;
 seqno |   random   
-------+------------
 9999  | 1227676208
(1 row)

SELECT b.*
   FROM bt_txt_heap b
   WHERE b.seqno = '4500'::text;
 seqno |   random   
-------+------------
 4500  | 2080851358
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno < '1'::float8;
 seqno |   random   
-------+------------
     0 | 1935401906
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno >= '9999'::float8;
 seqno |   random   
-------+------------
  9999 | 1227676208
(1 row)

SELECT b.*
   FROM bt_f8_heap b
   WHERE b.seqno = '4500'::float8;
 seqno |   random   
-------+------------
  4500 | 2080851358
(1 row)

--
-- Check correct optimization of LIKE (special index operator support)
-- for both indexscan and bitmapscan cases
--
set enable_seqscan to false;
set enable_indexscan to true;
set enable_bitmapscan to false;
select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
        proname         
------------------------
 RI_FKey_cascade_del
 RI_FKey_noaction_del
 RI_FKey_restrict_del
 RI_FKey_setdefault_del
 RI_FKey_setnull_del
(5 rows)

set enable_indexscan to false;
set enable_bitmapscan to true;
select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
        proname         
------------------------
 RI_FKey_cascade_del
 RI_FKey_noaction_del
 RI_FKey_restrict_del
 RI_FKey_setdefault_del
 RI_FKey_setnull_del
(5 rows)

--
-- Test B-tree page deletion. In particular, deleting a non-leaf page.
--
-- First create a tree that's at least four levels deep. The text inserted
-- is long and poorly compressible. That way only a few index tuples fit on
-- each page, allowing us to get a tall tree with fewer pages.
create table btree_tall_tbl(id int4, t text);
create index btree_tall_idx on btree_tall_tbl (id, t) with (fillfactor = 10);
insert into btree_tall_tbl
  select g, g::text || '_' ||
          (select string_agg(md5(i::text), '_') from generate_series(1, 50) i)
from generate_series(1, 100) g;
-- Delete most entries, and vacuum. This causes page deletions.
delete from btree_tall_tbl where id < 950;
vacuum btree_tall_tbl;
--
-- Test B-tree insertion with a metapage update (XLOG_BTREE_INSERT_META
-- WAL record type). This happens when a "fast root" page is split.
--
-- The vacuum above should've turned the leaf page into a fast root. We just
-- need to insert some rows to cause the fast root page to split.
insert into btree_tall_tbl (id, t)
  select g, repeat('x', 100) from generate_series(1, 500) g;
---
--- Test B-tree distance ordering
---
SET enable_bitmapscan = OFF;
CREATE INDEX bt_i4_heap_random_idx ON bt_i4_heap USING btree(random, seqno);
EXPLAIN (COSTS OFF)
SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 4000000;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Index Only Scan using bt_i4_heap_random_idx on bt_i4_heap
   Index Cond: ((random > 1000000) AND (ROW(random, seqno) < ROW(6000000, 0)))
   Order By: (random <-> 4000000)
(3 rows)

SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 4000000;
 seqno | random  
-------+---------
  6448 | 4157193
  9004 | 3783884
  4408 | 4488889
  8391 | 4825069
  8984 | 3148979
  1829 | 3053937
  6262 | 3013326
  5380 | 3000193
  9142 | 2847247
  8411 | 2809541
  2859 | 5224694
  6320 | 5257716
  2126 | 2648497
  8729 | 5450460
  6862 | 5556001
  1836 | 5593978
  2681 | 2321799
  2893 | 1919087
   210 | 1809552
(19 rows)

SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 10000000;
 seqno | random  
-------+---------
  1836 | 5593978
  6862 | 5556001
  8729 | 5450460
  6320 | 5257716
  2859 | 5224694
  8391 | 4825069
  4408 | 4488889
  6448 | 4157193
  9004 | 3783884
  8984 | 3148979
  1829 | 3053937
  6262 | 3013326
  5380 | 3000193
  9142 | 2847247
  8411 | 2809541
  2126 | 2648497
  2681 | 2321799
  2893 | 1919087
   210 | 1809552
(19 rows)

SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 0;
 seqno | random  
-------+---------
   210 | 1809552
  2893 | 1919087
  2681 | 2321799
  2126 | 2648497
  8411 | 2809541
  9142 | 2847247
  5380 | 3000193
  6262 | 3013326
  1829 | 3053937
  8984 | 3148979
  9004 | 3783884
  6448 | 4157193
  4408 | 4488889
  8391 | 4825069
  2859 | 5224694
  6320 | 5257716
  8729 | 5450460
  6862 | 5556001
  1836 | 5593978
(19 rows)

DROP INDEX bt_i4_heap_random_idx;
CREATE INDEX bt_i4_heap_random_idx ON bt_i4_heap USING btree(random DESC, seqno);
SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 4000000;
 seqno | random  
-------+---------
  6448 | 4157193
  9004 | 3783884
  4408 | 4488889
  8391 | 4825069
  8984 | 3148979
  1829 | 3053937
  6262 | 3013326
  5380 | 3000193
  9142 | 2847247
  8411 | 2809541
  2859 | 5224694
  6320 | 5257716
  2126 | 2648497
  8729 | 5450460
  6862 | 5556001
  1836 | 5593978
  2681 | 2321799
  2893 | 1919087
   210 | 1809552
(19 rows)

SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 10000000;
 seqno | random  
-------+---------
  1836 | 5593978
  6862 | 5556001
  8729 | 5450460
  6320 | 5257716
  2859 | 5224694
  8391 | 4825069
  4408 | 4488889
  6448 | 4157193
  9004 | 3783884
  8984 | 3148979
  1829 | 3053937
  6262 | 3013326
  5380 | 3000193
  9142 | 2847247
  8411 | 2809541
  2126 | 2648497
  2681 | 2321799
  2893 | 1919087
   210 | 1809552
(19 rows)

SELECT * FROM bt_i4_heap
WHERE random > 1000000 AND (random, seqno) < (6000000, 0)
ORDER BY random <-> 0;
 seqno | random  
-------+---------
   210 | 1809552
  2893 | 1919087
  2681 | 2321799
  2126 | 2648497
  8411 | 2809541
  9142 | 2847247
  5380 | 3000193
  6262 | 3013326
  1829 | 3053937
  8984 | 3148979
  9004 | 3783884
  6448 | 4157193
  4408 | 4488889
  8391 | 4825069
  2859 | 5224694
  6320 | 5257716
  8729 | 5450460
  6862 | 5556001
  1836 | 5593978
(19 rows)

DROP INDEX bt_i4_heap_random_idx;
CREATE TABLE tenk3 AS SELECT thousand, tenthous FROM tenk1;
INSERT INTO tenk3 VALUES (NULL, 1), (NULL, 2), (NULL, 3);
-- Test distance ordering by ASC index
CREATE INDEX tenk3_idx ON tenk3 USING btree(thousand, tenthous);
SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000)
ORDER BY thousand <-> 998;
 thousand | tenthous 
----------+----------
      998 |      998
      998 |     1998
      998 |     2998
      998 |     3998
      998 |     4998
      998 |     5998
      998 |     6998
      998 |     7998
      998 |     8998
      998 |     9998
      999 |      999
      999 |     1999
      999 |     2999
      999 |     3999
      999 |     4999
      999 |     5999
      999 |     6999
      999 |     7999
      999 |     8999
      999 |     9999
      997 |     9997
      997 |     8997
      997 |     7997
      997 |     6997
      997 |     5997
(25 rows)

SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000)
ORDER BY thousand <-> 0;
 thousand | tenthous 
----------+----------
      997 |     5997
      997 |     6997
      997 |     7997
      997 |     8997
      997 |     9997
      998 |      998
      998 |     1998
      998 |     2998
      998 |     3998
      998 |     4998
      998 |     5998
      998 |     6998
      998 |     7998
      998 |     8998
      998 |     9998
      999 |      999
      999 |     1999
      999 |     2999
      999 |     3999
      999 |     4999
      999 |     5999
      999 |     6999
      999 |     7999
      999 |     8999
      999 |     9999
(25 rows)

SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000) AND thousand < 1000
ORDER BY thousand <-> 10000;
 thousand | tenthous 
----------+----------
      999 |     9999
      999 |     8999
      999 |     7999
      999 |     6999
      999 |     5999
      999 |     4999
      999 |     3999
      999 |     2999
      999 |     1999
      999 |      999
      998 |     9998
      998 |     8998
      998 |     7998
      998 |     6998
      998 |     5998
      998 |     4998
      998 |     3998
      998 |     2998
      998 |     1998
      998 |      998
      997 |     9997
      997 |     8997
      997 |     7997
      997 |     6997
      997 |     5997
(25 rows)

SELECT thousand, tenthous FROM tenk3
ORDER BY thousand <-> 500
OFFSET 9970;
 thousand | tenthous 
----------+----------
      999 |      999
      999 |     1999
      999 |     2999
      999 |     3999
      999 |     4999
      999 |     5999
      999 |     6999
      999 |     7999
      999 |     8999
      999 |     9999
        1 |     9001
        1 |     8001
        1 |     7001
        1 |     6001
        1 |     5001
        1 |     4001
        1 |     3001
        1 |     2001
        1 |     1001
        1 |        1
        0 |     9000
        0 |     8000
        0 |     7000
        0 |     6000
        0 |     5000
        0 |     4000
        0 |     3000
        0 |     2000
        0 |     1000
        0 |        0
          |        1
          |        2
          |        3
(33 rows)

DROP INDEX tenk3_idx;
-- Test distance ordering by DESC index
CREATE INDEX tenk3_idx ON tenk3 USING btree(thousand DESC, tenthous);
SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000)
ORDER BY thousand <-> 998;
 thousand | tenthous 
----------+----------
      998 |      998
      998 |     1998
      998 |     2998
      998 |     3998
      998 |     4998
      998 |     5998
      998 |     6998
      998 |     7998
      998 |     8998
      998 |     9998
      997 |     5997
      997 |     6997
      997 |     7997
      997 |     8997
      997 |     9997
      999 |     9999
      999 |     8999
      999 |     7999
      999 |     6999
      999 |     5999
      999 |     4999
      999 |     3999
      999 |     2999
      999 |     1999
      999 |      999
(25 rows)

SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000)
ORDER BY thousand <-> 0;
 thousand | tenthous 
----------+----------
      997 |     9997
      997 |     8997
      997 |     7997
      997 |     6997
      997 |     5997
      998 |     9998
      998 |     8998
      998 |     7998
      998 |     6998
      998 |     5998
      998 |     4998
      998 |     3998
      998 |     2998
      998 |     1998
      998 |      998
      999 |     9999
      999 |     8999
      999 |     7999
      999 |     6999
      999 |     5999
      999 |     4999
      999 |     3999
      999 |     2999
      999 |     1999
      999 |      999
(25 rows)

SELECT thousand, tenthous FROM tenk3
WHERE (thousand, tenthous) >= (997, 5000) AND thousand < 1000
ORDER BY thousand <-> 10000;
 thousand | tenthous 
----------+----------
      999 |      999
      999 |     1999
      999 |     2999
      999 |     3999
      999 |     4999
      999 |     5999
      999 |     6999
      999 |     7999
      999 |     8999
      999 |     9999
      998 |      998
      998 |     1998
      998 |     2998
      998 |     3998
      998 |     4998
      998 |     5998
      998 |     6998
      998 |     7998
      998 |     8998
      998 |     9998
      997 |     5997
      997 |     6997
      997 |     7997
      997 |     8997
      997 |     9997
(25 rows)

SELECT thousand, tenthous FROM tenk3
ORDER BY thousand <-> 500
OFFSET 9970;
 thousand | tenthous 
----------+----------
        1 |        1
        1 |     1001
        1 |     2001
        1 |     3001
        1 |     4001
        1 |     5001
        1 |     6001
        1 |     7001
        1 |     8001
        1 |     9001
      999 |     9999
      999 |     8999
      999 |     7999
      999 |     6999
      999 |     5999
      999 |     4999
      999 |     3999
      999 |     2999
      999 |     1999
      999 |      999
        0 |        0
        0 |     1000
        0 |     2000
        0 |     3000
        0 |     4000
        0 |     5000
        0 |     6000
        0 |     7000
        0 |     8000
        0 |     9000
          |        3
          |        2
          |        1
(33 rows)

DROP INDEX tenk3_idx;
DROP TABLE tenk3;
RESET enable_bitmapscan;
